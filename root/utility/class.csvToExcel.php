<?php
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
const ROOT = __DIR__;

include_once(ROOT . '/class.CParMain.php');

ini_set('error_reporting', E_ALL & ~E_NOTICE & ~E_WARNING & ~E_DEPRECATED & ~E_STRICT);
ini_set('display_errors', 1);
class csvToExcel extends CParMain  {


    function regenerateXlsxFromCsv(
        $csvFilePath,
        $outputDir,
        array $propMap,
        callable $normalizeKeyFunc,
        callable $flattenProductRowFunc,
        callable $sanitizeSheetTitleFunc
    ) {
        $this->logMessage("üõ† –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é XLSX –∏–∑ CSV: $csvFilePath");

        if (!file_exists($csvFilePath)) {
            $this->logMessage("‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $csvFilePath");
            throw new Exception("CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $csvFilePath");
        }

        // –ß—Ç–µ–Ω–∏–µ CSV –≤ –º–∞—Å—Å–∏–≤
        $handle = fopen($csvFilePath, 'r');
        if (!$handle) {
            $this->logMessage("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ CSV –¥–ª—è —á—Ç–µ–Ω–∏—è: $csvFilePath");
            throw new Exception("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ CSV –¥–ª—è —á—Ç–µ–Ω–∏—è: $csvFilePath");
        }

        $headers = fgetcsv($handle, 0, ';');
        if ($headers === false) {
            fclose($handle);
            $this->logMessage("‚ùå CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω: $csvFilePath");
            throw new Exception("CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω");
        }
        $this->logMessage("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã: " . implode(', ', $headers));

        $productsData = [];
        $lineCount = 1;
        while (($row = fgetcsv($handle, 0, ';')) !== false) {
            $lineCount++;
            $item = array_combine($headers, $row);
            if ($item === false) {
                $this->logMessage("‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ $lineCount –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –ø—Ä–æ–ø—É—â–µ–Ω–∞");
                continue;
            }
            if (isset($item['props'])) {
                $item['props'] = json_decode($item['props'], true) ?: [];
            }
            $productsData[] = $item;

            if ($lineCount % 1000 === 0) {
                $this->logMessage("‚è≥ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: $lineCount");
            }
        }
        fclose($handle);
        $this->logMessage("‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: " . count($productsData));

        if (empty($productsData)) {
            $this->logMessage("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è XLSX");
            throw new Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è XLSX");
        }

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π "–∫—Ä–æ—à–∫–µ"
        $groups = [];
        $maxCrumbsCount = 0;
        $maxImagesCount = 0;
        $allPropKeys = [];
        $itemIndex = 0;
        foreach ($productsData as $item) {
            $itemIndex++;
            $crumbs = [];
            foreach ($headers as $h) {
                if (strpos($h, '–ö—Ä–æ—à–∫–∞') === 0) {
                    $crumbs[] = isset($item[$h]) ? $item[$h] : '';
                }
            }
            $crumbKey = !empty($crumbs[0]) ? $crumbs[0] : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';

            if (!isset($groups[$crumbKey])) {
                $groups[$crumbKey] = [];
                $this->logMessage("‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: \"$crumbKey\"");
            }

            $item['crumbs'] = $crumbs;

            $images = [];
            foreach ($headers as $h) {
                if (strpos($h, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') === 0) {
                    $images[] = isset($item[$h]) ? $item[$h] : '';
                }
            }
            $item['images'] = $images;

            $props = [];
            foreach ($item as $key => $val) {
                if (!in_array($key, $headers) || in_array($key, ['–°—Å—ã–ª–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ï–¥. –∏–∑–º.', '–û–ø–∏—Å–∞–Ω–∏–µ']) ||
                    strpos($key, '–ö—Ä–æ—à–∫–∞') === 0 || strpos($key, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') === 0) {
                    continue;
                }
                if (!in_array($key, ['crumbs', 'images', 'props'])) {
                    $props[$key] = $val;
                }
            }
            $item['props'] = $props;

            $groups[$crumbKey][] = $item;

            $maxCrumbsCount = max($maxCrumbsCount, count($crumbs));
            $maxImagesCount = max($maxImagesCount, count($images));

            foreach ($props as $key => $val) {
                $keyNorm = $normalizeKeyFunc($key);
                $normKey = isset($propMap[$keyNorm]) ? $propMap[$keyNorm] : ucfirst($keyNorm);
                if (!in_array($normKey, ['–ì–∞–±–∞—Ä–∏—Ç—ã','–î–ª–∏–Ω–∞','–®–∏—Ä–∏–Ω–∞','–í—ã—Å–æ—Ç–∞'])) {
                    $allPropKeys[$normKey] = true;
                }
            }
            $allPropKeys['–ì–∞–±–∞—Ä–∏—Ç—ã'] = true;

            if ($itemIndex % 1000 === 0) {
                $this->logMessage("‚è≥ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ $itemIndex —Å—Ç—Ä–æ–∫");
            }
        }
        $this->logMessage("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: " . count($groups));

        $propKeys = array_keys($allPropKeys);
        sort($propKeys);

        $headersFinal = [];
        for ($i=1; $i<=$maxCrumbsCount; $i++) $headersFinal[] = "–ö—Ä–æ—à–∫–∞ {$i}";
        $headersFinal = array_merge($headersFinal, ['–°—Å—ã–ª–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ï–¥. –∏–∑–º.']);
        for ($i=1; $i<=$maxImagesCount; $i++) $headersFinal[] = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {$i}";
        $headersFinal = array_merge($headersFinal, $propKeys);
        $headersFinal[] = '–û–ø–∏—Å–∞–Ω–∏–µ';

        $this->logMessage("‚ÑπÔ∏è –ò—Ç–æ–≥–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è XLSX —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: " . implode(', ', $headersFinal));

        $spreadsheet = new Spreadsheet();

        // –õ–∏—Å—Ç "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
        $sheetAll = $spreadsheet->getActiveSheet();
        $sheetAll->setTitle('–í—Å–µ —Ç–æ–≤–∞—Ä—ã');
        $this->logMessage("üìã –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç ¬´–í—Å–µ —Ç–æ–≤–∞—Ä—ã¬ª");

        $col = 1;
        foreach ($headersFinal as $h) {
            $sheetAll->setCellValueByColumnAndRow($col++, 1, $h);
        }

        $rowNum = 2;
        foreach ($productsData as $item) {
            $row = $flattenProductRowFunc($item, $headersFinal, $propMap, $maxCrumbsCount, $maxImagesCount);
            $col = 1;
            foreach ($row as $val) {
                $sheetAll->setCellValueByColumnAndRow($col++, $rowNum, $val);
            }
            if (($rowNum - 1) % 1000 === 0) {
                $this->logMessage("‚è≥ –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫ –Ω–∞ –ª–∏—Å—Ç ¬´–í—Å–µ —Ç–æ–≤–∞—Ä—ã¬ª: " . ($rowNum - 1));
            }
            $rowNum++;
        }
        $this->logMessage("‚úÖ –õ–∏—Å—Ç ¬´–í—Å–µ —Ç–æ–≤–∞—Ä—ã¬ª –∑–∞–ø–∏—Å–∞–Ω —Å—Ç—Ä–æ–∫: " . ($rowNum - 2));

        // –õ–∏—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        $sheetCount = 0;
        foreach ($groups as $cat => $items) {
            $sheetCount++;
            $safeTitle = $sanitizeSheetTitleFunc($cat);
            $sheet = $spreadsheet->createSheet();
            $sheet->setTitle($safeTitle);
            $this->logMessage("üìã –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"$cat\" —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"$safeTitle\"");

            $groupPropKeys = [];
            $maxGroupCrumbs = 0;
            $maxGroupImages = 0;
            foreach ($items as $idx => $item) {
                $maxGroupCrumbs = max($maxGroupCrumbs, isset($item['crumbs']) ? count($item['crumbs']) : 0);
                $maxGroupImages = max($maxGroupImages, isset($item['images']) ? count($item['images']) : 0);
                if (isset($item['props']) && is_array($item['props'])) {
                    foreach ($item['props'] as $key => $val) {
                        $keyNorm = $normalizeKeyFunc($key);
                        $normKey = isset($propMap[$keyNorm]) ? $propMap[$keyNorm] : ucfirst($keyNorm);
                        if (!in_array($normKey, ['–ì–∞–±–∞—Ä–∏—Ç—ã','–î–ª–∏–Ω–∞','–®–∏—Ä–∏–Ω–∞','–í—ã—Å–æ—Ç–∞'])) {
                            $groupPropKeys[$normKey] = true;
                        }
                    }
                }
                $groupPropKeys['–ì–∞–±–∞—Ä–∏—Ç—ã'] = true;
            }
            $propKeysLocal = array_keys($groupPropKeys);
            sort($propKeysLocal);

            $headersLocal = [];
            for ($i=1; $i<=$maxGroupCrumbs; $i++) $headersLocal[] = "–ö—Ä–æ—à–∫–∞ {$i}";
            $headersLocal = array_merge($headersLocal, ['–°—Å—ã–ª–∫–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ï–¥. –∏–∑–º.']);
            for ($i=1; $i<=$maxGroupImages; $i++) $headersLocal[] = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {$i}";
            $headersLocal = array_merge($headersLocal, $propKeysLocal);
            $headersLocal[] = '–û–ø–∏—Å–∞–Ω–∏–µ';

            $col = 1;
            foreach ($headersLocal as $h) {
                $sheet->setCellValueByColumnAndRow($col++, 1, $h);
            }

            $rowNum = 2;
            foreach ($items as $item) {
                $row = $flattenProductRowFunc($item, $headersLocal, $propMap, $maxGroupCrumbs, $maxGroupImages);
                $col = 1;
                foreach ($row as $val) {
                    $sheet->setCellValueByColumnAndRow($col++, $rowNum, $val);
                }
                if (($rowNum - 1) % 1000 === 0) {
                    $this->logMessage("‚è≥ –õ–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"$cat\": –∑–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: " . ($rowNum - 1));
                }
                $rowNum++;
            }
            $this->logMessage("‚úÖ –õ–∏—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"$cat\" –∑–∞–ø–∏—Å–∞–Ω —Å—Ç—Ä–æ–∫: " . ($rowNum - 2));
        }
        $this->logMessage("üìä –°–æ–∑–¥–∞–Ω–æ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $sheetCount");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º XLSX
        $outputFile = $outputDir . DIRECTORY_SEPARATOR . 'Regenerated_' . date('Ymd_His') . '.xlsx';
        $writer = new Xlsx($spreadsheet);
        $writer->save($outputFile);
        $this->logMessage("üíæ XLSX —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $outputFile");

        return $outputFile;
    }

    function start() {
        $outputXlsx = $this->regenerateXlsxFromCsv(
            'CParKupatika_summary.csv',
            __DIR__,
            include __DIR__.'/prop_dictionary.php',
            [$this, 'normalizeKey'],
            [$this, 'flattenProductRow'],
            [$this, 'sanitizeSheetTitle']
        );
        $this->logMessage("XLSX —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω: $outputXlsx");
    }
}
$c = new csvToExcel();
$c->start();


